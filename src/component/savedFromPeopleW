

        //pollInterval: (60*1000), 
//var endTime = (new Date()).toISOString();
    
   // const [timeStamp, setTimeStamp] = useState('');
    //const [peopleIn, setPeopleIn] = useState(Number(0));
    
    //const [tryck, setTryck]=useState('Loading');
/*
    useEffect(() => {
        console.log("Uppdaterad");
        if(data?.device.lastHeard !== timeStamp){
            /*console.log("Inuti");
            //console.log(typeof(data?.device.currentMeasurements[0].value));
            if(typeof(data?.device.currentMeasurements[0].value) === 'number'){
                setPeopleIn((peopleIn + data?.device.currentMeasurements[0].value));
            }else{
                console.log("data er ikke nummer");
            }

            setTimeStamp(data?.device.lastHeard);
            
        }
    },[data?.device]);
  */  


   /* useEffect(() => {
        const timer = setInterval(() => { // Creates an interval which will update the current data every minute
          // This will trigger a rerender every component that uses the useDate hook.
        setPeopleIn((prev)=>{
            return prev - prev*0.05; //Kolla upp så denna är rätt inställd.
        });
        if(peopleIn<=6){
            setTryck('Lågt');
        }else if(peopleIn<=12){
            setTryck('Medel');
        }else{
            setTryck('Högt');
        }
      }, 60 * 2*1000);
      return () => {
        clearInterval(timer); // Return a funtion to clear the timer so that it will stop being called on unmount
      }
    }, []);*/